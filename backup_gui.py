import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from tkinter import messagebox, filedialog
import threading
import datetime
import os
import json
from models import *

class BackupGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.master.geometry("400x350")

        self.backup_folder = None
        self.backup_timer = None
        self.interval = 3600  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å

        ttk.Label(master, text="üîê –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", font=("Arial", 16)).pack(pady=10)

        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        ttk.Button(master, text="üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π", bootstyle="secondary", command=self.choose_backup_folder).pack(pady=10)

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª
        ttk.Label(master, text="‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:").pack()
        interval_frame = ttk.Frame(master)
        interval_frame.pack(pady=5)

        self.interval_entry = ttk.Entry(interval_frame, width=10)
        self.interval_entry.insert(0, "10")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10
        self.interval_entry.pack(side=ttk.LEFT)

        self.interval_unit_var = ttk.StringVar(value="—Å–µ–∫—É–Ω–¥—ã")
        ttk.Combobox(interval_frame,
                     textvariable=self.interval_unit_var,
                     values=["—Å–µ–∫—É–Ω–¥—ã", "–º–∏–Ω—É—Ç—ã", "—á–∞—Å—ã"],
                     state="readonly",
                     width=10).pack(side=ttk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(master)
        btn_frame.pack(pady=20)

        ttk.Button(btn_frame, text="‚ñ∂ –ù–∞—á–∞—Ç—å", bootstyle="success", command=self.start_backup).pack(side=ttk.LEFT, padx=5)
        ttk.Button(btn_frame, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", bootstyle="danger", command=self.stop_backup).pack(side=ttk.LEFT, padx=5)

    def choose_backup_folder(self):
        self.backup_folder = filedialog.askdirectory()
        if self.backup_folder:
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞:\n{self.backup_folder}")

    def start_backup(self):
        if not self.backup_folder:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        try:
            val = int(self.interval_entry.get())
            unit = self.interval_unit_var.get()

            if unit == "—Å–µ–∫—É–Ω–¥—ã":
                self.interval = val
            elif unit == "–º–∏–Ω—É—Ç—ã":
                self.interval = val * 60
            elif unit == "—á–∞—Å—ã":
                self.interval = val * 60 * 60
        except:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
            return

        self.schedule_backup()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ë—ç–∫–∞–ø –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ {val} {unit}")

    def schedule_backup(self):
        self.perform_backup()
        self.backup_timer = threading.Timer(self.interval, self.schedule_backup)
        self.backup_timer.start()

    def stop_backup(self):
        if self.backup_timer:
            self.backup_timer.cancel()
            self.backup_timer = None
            messagebox.showinfo("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            messagebox.showinfo("–ù–µ–∞–∫—Ç–∏–≤–Ω–æ", "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")

    def perform_backup(self):
        if not self.backup_folder:
            return

        data = self.get_all_data()
        now = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        path = os.path.join(self.backup_folder, f"backup_{now}.json")

        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

    def get_all_data(self):
        def model_to_dict_list(model):
            return [dict(obj.__data__) for obj in model.select()]

        return {
            "clients": model_to_dict_list(Client),
            "agents": model_to_dict_list(Agent),
            "real_estate": model_to_dict_list(RealEstate),
            "deals": model_to_dict_list(Deal),
            "contracts": model_to_dict_list(Contract),
            "sales": model_to_dict_list(Sale),
            "rents": model_to_dict_list(Rent),
        }

def run():
    win = ttk.Toplevel()
    BackupGUI(win)

if __name__ == '__main__':
    mysql_db.connect()
    app = ttk.Window(themename="flatly")
    BackupGUI(app)
    app.mainloop()
