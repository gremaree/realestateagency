import random
from datetime import date, timedelta
from models import *
from peewee import fn

mysql_db.connect()

def clear_all():
    print("üßπ –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
    Rent.delete().execute()
    Sale.delete().execute()
    Contract.delete().execute()
    DealParticipant.delete().execute()
    Deal.delete().execute()
    Apartment.delete().execute()
    House.delete().execute()
    LandPlot.delete().execute()
    RealEstate.delete().execute()
    Agent.delete().execute()
    Client.delete().execute()
    PersonalData.delete().execute()
    FIO.delete().execute()
    PassportData.delete().execute()
    Address.delete().execute()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã.")

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
first_names = ["–ò–≤–∞–Ω", "–ê–Ω–Ω–∞", "–û–ª–µ–≥", "–ú–∞—Ä–∏—è", "–î–º–∏—Ç—Ä–∏–π", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞"]
last_names = ["–ò–≤–∞–Ω–æ–≤", "–°–º–∏—Ä–Ω–æ–≤–∞", "–ö—É–∑–Ω–µ—Ü–æ–≤", "–ü–æ–ø–æ–≤–∞", "–í–∞—Å–∏–ª—å–µ–≤", "–ù–æ–≤–∏–∫–æ–≤–∞"]
patronymics = ["–ò–≤–∞–Ω–æ–≤–∏—á", "–°–µ—Ä–≥–µ–µ–≤–Ω–∞", "–ü–µ—Ç—Ä–æ–≤–∏—á", "–ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞"]

cities = ["–ú–æ—Å–∫–≤–∞", "–ö–∞–∑–∞–Ω—å", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"]
streets = ["–õ–µ–Ω–∏–Ω–∞", "–¢–≤–µ—Ä—Å–∫–∞—è", "–°–æ–≤–µ—Ç—Å–∫–∞—è", "–ú–∏—Ä–∞", "–ü—É—à–∫–∏–Ω–∞"]

specializations = ["–ö–≤–∞—Ä—Ç–∏—Ä—ã", "–ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è", "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è"]

def create_fio():
    return FIO.create(
        last_name=random.choice(last_names),
        first_name=random.choice(first_names),
        patronymic=random.choice(patronymics)
    )

def create_passport():
    return PassportData.create(
        series=str(random.randint(1000, 9999)),
        number=str(random.randint(100000, 999999))
    )

def create_address():
    return Address.create(
        city=random.choice(cities),
        street=random.choice(streets),
        house_number=str(random.randint(1, 100))
    )

def create_person():
    fio = create_fio()
    passport = create_passport()
    address = create_address()
    return PersonalData.create(fio=fio, passport=passport, address=address)

def create_clients(n=5):
    for _ in range(n):
        Client.create(personal_data=create_person())

def create_agents(n=3):
    for _ in range(n):
        pdata = create_person()
        Agent.create(
            personal_data=pdata,
            specialization=random.choice(specializations),
            salary=random.randint(50000, 100000)
        )

def create_real_estate(n=6):
    for _ in range(n):
        address = create_address()
        t = random.choice(["apartment", "house", "landplot"])
        estate = RealEstate.create(type=t, status=random.choice(["—Å–≤–æ–±–æ–¥–µ–Ω", "–≤ –∞—Ä–µ–Ω–¥–µ", "–ø—Ä–æ–¥–∞–Ω"]), address=address)
        if t == "apartment":
            Apartment.create(real_estate=estate, floor=random.randint(1, 15), rooms=random.randint(1, 4))
        elif t == "house":
            House.create(real_estate=estate, floors=random.randint(1, 3))
        else:
            LandPlot.create(real_estate=estate, area=random.randint(200, 1200))

def create_real_estate():
    types = ["apartment", "house", "landplot"]
    for t in types:
        for _ in range(2):  # –ø–æ 2 –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            address = create_address()
            estate = RealEstate.create(
                type=t,
                status=random.choice(["—Å–≤–æ–±–æ–¥–µ–Ω", "–≤ –∞—Ä–µ–Ω–¥–µ", "–ø—Ä–æ–¥–∞–Ω"]),
                address=address
            )
            if t == "apartment":
                Apartment.create(real_estate=estate, floor=random.randint(1, 10), rooms=random.randint(1, 4))
            elif t == "house":
                House.create(real_estate=estate, floors=random.randint(1, 3))
            elif t == "landplot":
                LandPlot.create(real_estate=estate, area=random.randint(300, 1500))


def show_summary():
    print("\nüìä –°–≤–æ–¥–∫–∞:")
    print(f"üë• –ö–ª–∏–µ–Ω—Ç—ã: {Client.select().count()}")
    print(f"üë®‚Äçüíº –ê–≥–µ–Ω—Ç—ã: {Agent.select().count()}")
    print(f"üèò –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å: {RealEstate.select().count()}")
    print(f"ü§ù –°–¥–µ–ª–∫–∏: {Deal.select().count()}")
    print(f"üìÑ –î–æ–≥–æ–≤–æ—Ä—ã: {Contract.select().count()}")
    print(f"üîÅ –ê—Ä–µ–Ω–¥–∞: {Rent.select().count()} | üí∞ –ü—Ä–æ–¥–∞–∂–∞: {Sale.select().count()}")

def generate_all():
    clear_all()
    create_clients(5)
    create_agents(3)
    create_real_estate(6)
    create_deals_and_contracts()
    show_summary()

if __name__ == "__main__":
    mysql_db.connect(reuse_if_open=True)
    generate_all()
